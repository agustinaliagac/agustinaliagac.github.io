{"data":{"site":{"siteMetadata":{"title":"Blogging!","author":"Agustín Aliaga"}},"markdownRemark":{"id":"c8ca4e6f-7276-5b54-8703-a8da0815682a","excerpt":"\n Photo by  Caspar\nRubin \non\n Unsplash This post series is aimed at Java developers wanting to learn Javascript. It is\nan attempt to…","html":"<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7aJPlxn8gwhI7JjcBFr-tQ.jpeg\">\n<span class=\"figcaption_hack\">Photo by <a href=\"https://unsplash.com/photos/fPkvU7RDmCo?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Caspar\nRubin</a>\non\n<a href=\"https://unsplash.com/search/photos/javascript?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></span></p>\n<p>This post series is aimed at Java developers wanting to learn Javascript. It is\nan attempt to <strong>summarize</strong> a set of core language concepts and best practices\nwhile comparing those concepts to analogous Java.</p>\n<h4>Scope</h4>\n<p>A scope (or lexical scope) is the region in the source code where entities are\nreachable by their names. In other words, it is the code section where variables\n“live” and can be referenced. Most of C-based languages are block-scoped,\nmeaning that a variable’s lifespan is set to the containing block of code (a\nfunction body, an if-statement body, a for loop body, etc.).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        String name <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            String lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Jackson\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compiler throws an error: Cannot resolve symbole 'lastName'</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In JS, this is very different because the scope of the variable depends on how\nyou declare it. If the variable is declared using the <code class=\"language-text\">var</code> keyword, its scope is\nset to the containing <strong>function</strong>. This means that no matter which containing\nblock surrounds it, the variable will be available for reference everywhere\ninside of the enclosing function. ES6 introduced two new keywords for variable\ndeclaration: <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>. They both create <strong>block-scoped</strong> variables, but\n<code class=\"language-text\">const</code> makes it a constant, meaning that it cannot be reassigned or re-declared\n(in a way, this is like declaring <code class=\"language-text\">final</code> attributes in Java). Notice that\n<strong>declaring a variable with <code class=\"language-text\">const</code> does not prevent you from mutating the\nvariable (modifying internal properties).</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Javascript</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Jackson'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Since lastName was defined with 'const' it is block-scoped. (The same happens with 'let).</span>\n        <span class=\"token keyword\">var</span> abilities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'singning'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dancing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abilities on the other hand is declared with 'var', so it is function-scoped.</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>abilities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [ 'singning', 'dancing' ]</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: lastName is not defined.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It is advisable to declare the variables right at the beginning of the function\nwhere they’ll be used, instead of declaring them at the latest possible moment\nas you would do in Java. This will make the code much easier for you and other\ndevelopers to understand.</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\">https://en.wikipedia.org/wiki/Scope<em>(computer</em>science)</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript\">https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></li>\n</ul>\n<h4>Closures</h4>\n<p>Although they exist in Java 8 (using lambdas) and can be simulated with\nanonymous classes, some developers are not aware of them. Closures consist in a\nfunction and the lexical scope within which that function was declared. The\nfunction gets access to the enclosing scope’s variables and arguments, even if\nit was already returned. Remember that in Javascript, <strong>functions are\nfirst-class citizens</strong>, so a function can be assigned to a variable, passed as\nan argument or returned from another function (this is called “higher-order\nfunctions”), so it is important to understand the accessible variables from any\nfunction.</p>\n<p>This concept is important to understand the visibility of variables inside\nnested functions and objects. In both implementations we can verify that even\nthough the function “getSayHiFunc” has returned, “sayHi” still has visibility on\n<code class=\"language-text\">called</code> and <code class=\"language-text\">upperCase</code> .</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></li>\n</ul>\n<h4>Global Context</h4>\n<p>In Java, every single variable or function is contained inside a <code class=\"language-text\">class</code> . By\nusing classes as basic building blocks of the language, it enforces it’s own\nvision of Object Oriented Programming. This means there’s no global space where\nunwanted collisions occur in an unpredictable manner.</p>\n<p>In JS you’re allowed to declare functions and variables outside of every single\nfunction in your program. **This is considered a bad practice because it\npollutes the global context. **To understand what the “global context” is, let’s\nfirst discuss what an “execution context” means.</p>\n<p>An execution context refers to the <em>environment</em> in which the current code is\nrunning. It will create the lexical scope, link it to enclosing scopes (this is\ncalled the “scope chain”) and provide a value for the keyword <code class=\"language-text\">this</code> . When your\nJS application runs, the first execution context created is called “global\ncontext”. Then, every time a function gets called, it will create a new\nexecution context for it and push it to the “call stack” or “execution context\nstack”. When a function ends its execution, its execution context will be popped\nfrom the stack.</p>\n<p>The big problem with the global context is that your entire application shares\nit, and its variables can be modified anywhere including your project’s\ndependencies. This means that if multiple scripts are loaded in the same page,\nany execution context will be able to reference, mutate or re-declare global\nvariables. A solution to avoid declaring variables in the global context, is to\nuse an “Immediately-Invoked Function Expression”. IIFE syntax is used to declare\na function and execute it right after creation. This will create a brand new\nexecution context where we can safely declare our variables.</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://hackernoon.com/execution-context-in-javascript-319dd72e8e2c\">https://hackernoon.com/execution-context-in-javascript-319dd72e8e2c</a></li>\n<li><a href=\"https://www.valentinog.com/blog/js-execution-context-call-stack/\">https://www.valentinog.com/blog/js-execution-context-call-stack/</a></li>\n<li><a href=\"https://codeburst.io/js-demystified-04-execution-context-97dea52c8ac6\">https://codeburst.io/js-demystified-04-execution-context-97dea52c8ac6</a></li>\n<li><a href=\"https://codeburst.io/javascript-what-the-heck-is-an-immediately-invoked-function-expression-a0ed32b66c18\">https://codeburst.io/javascript-what-the-heck-is-an-immediately-invoked-function-expression-a0ed32b66c18</a></li>\n</ul>\n<h4>The “this” keyword</h4>\n<p>This is a topic that confuses newcomers a lot and has been well explained in\nmultiple articles on the web. In Java, the <code class=\"language-text\">this</code> keyword is always pointing to\nthe current object instance. It can be used to access properties (avoiding\nshadows on methods or constructors) or to call another constructor in the same\nclass.</p>\n<p>In Javascript, the <code class=\"language-text\">this</code> keyword is bound on execution time to a value\ndepending on its execution context. Remembering the following rules should be\nenough to avoid catastrophic mistakes:</p>\n<ol>\n<li>When used in an object method, <code class=\"language-text\">this</code> will be bound to the method’s owner\nobject.</li>\n<li>When used in a Constructor Function, <code class=\"language-text\">this</code> will be bound to the constructed\nobject (which is implicitly returned).</li>\n<li>When used in the Global Context (out of any function scope), <code class=\"language-text\">this</code> will be\nbound to the global object. The global object will be <code class=\"language-text\">window</code> in the browser,\nor <code class=\"language-text\">undefined</code>when using strict mode.</li>\n<li>When used inside a “simple function” (meaning that it’s not a constructor\nfunction nor an object method) <code class=\"language-text\">this</code> will be bound to the global object.</li>\n<li>Arrow functions are a completely different way to declare functions since\nES6/ES2015. When using <code class=\"language-text\">this</code> inside of an arrow function, it will be bound to\nthe enclosing lexical context’s “this” value. That is to say, it will take the\n<code class=\"language-text\">this</code> value from the enclosing context where the arrow function was created.</li>\n</ol>\n<p>You can also manually bind whatever object you want to <code class=\"language-text\">this</code> for simple\nfunctions, by using one of the following:</p>\n<ul>\n<li><code class=\"language-text\">Function.prototype.call()</code></li>\n<li><code class=\"language-text\">Function.prototype.apply()</code></li>\n<li><code class=\"language-text\">Function.prototype.bind()</code></li>\n</ul>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function</a></li>\n</ul>\n<h4>Equality operators</h4>\n<p>Another thing that differs a lot between the two languages is how you compare\nentities. In Java, you can use the <code class=\"language-text\">==</code>operator to compare primitives such as\n<em>integers</em> or <em>floats</em> or to compare object references. You can also implement\nthe “<em>Comparable</em>” interface or override <code class=\"language-text\">equals()</code>from Object in a predictive\nand safe way.</p>\n<p>JS has a more flexible way of comparing entities, allowing both strict and\nnon-strict operators. A strict comparison verifies that both objects are the\nsame type before comparing values. In contrast, non-strict comparisons try to\nenforce a type conversion when they don’t match before actually checking the\nvalues. The problem with non-strict operators is that the type conversion\nprocess is somehow hard to infer. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\">Here’s a table that exposes the complexity of\nusing the non-strict\noperators</a>.\nTherefore,** it is usually recommended to stick with the strict operators**,\nwhich are <code class=\"language-text\">===</code>for equality and <code class=\"language-text\">!==</code> for inequality.</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality<em>comparisons</em>and_sameness</a></li>\n</ul>\n<h4>Undefined and null</h4>\n<p>Most languages have a keyword to represent the emptiness of a value. Java\nhas<code class=\"language-text\">null</code> , which is used exactly for that. It can also be used to remove an\nobject from memory by assigning <code class=\"language-text\">null</code> to its reference and waiting for the\ngarbage collector to clear it.</p>\n<p>Unfortunately, in Javascript we can use two keywords for that purpose: <code class=\"language-text\">null</code>and\n<code class=\"language-text\">undefined</code> . To make it short,<code class=\"language-text\">null</code> is a special type of object that\nrepresents “nothing” and needs to be manually set to a variable. On the other\nhand, <code class=\"language-text\">undefined</code> is a special value that JS’s engine automatically sets to\ndeclared (but unassigned) variables. <code class=\"language-text\">undefined</code> can also be manually set to a\nvariable (just like <code class=\"language-text\">null</code>).</p>\n<p>Because of this, an extremely common task such as checking if a value is defined\nbecomes confusing. I’ve seen many times developers understandably trying to\ntranslate Java’s <code class=\"language-text\">if (a != null)</code> into something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// won&#39;t work if &#39;a&#39; is null\nif (a === undefined) {\n ...\n}\n\n// won&#39;t work if &#39;a&#39; is undefined\nif (a === null) {\n ...\n}</code></pre></div>\n<p>As you can see, there’s some trouble using this approach so it should be avoided\nwhen possible.</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://codeburst.io/javascript-null-vs-undefined-20f955215a2\">https://codeburst.io/javascript-null-vs-undefined-20f955215a2</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null</a></li>\n</ul>\n<h4>Checking if a value is defined</h4>\n<p>So, if it’s not advisable to strictly compare values to <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>,\nhow can we know if an element is defined in a reliable way? One approach could\nbe using the non-strict equality operator <code class=\"language-text\">==</code> . However, this approach doesn’t\ncontemplate empty strings or zeroes.</p>\n<p>A better way to check if a value is defined is looking for “falsy” or “truthy”\nvalues inside a condition check. Unlike Java, in JS you can evaluate elements\nthat are not of boolean type inside a “Boolean context”. This means you can put\nnumbers, strings, objects or arrays inside of “if” conditions, ternary\nexpressions, “for” loop conditions, etc. Javascript will convert the given type\nto <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> under the hood, depending on the truthiness its value.</p>\n<p><em>Read more</em>:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">https://developer.mozilla.org/en-US/docs/Glossary/Truthy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">https://developer.mozilla.org/en-US/docs/Glossary/Falsy</a></li>\n</ul>\n<h4>Awesome Resources</h4>\n<ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">https://github.com/getify/You-Dont-Know-JS</a></li>\n<li><a href=\"https://github.com/denysdovhan/wtfjs\">https://github.com/denysdovhan/wtfjs</a></li>\n<li><a href=\"http://shop.oreilly.com/product/9780596517748.do\">http://shop.oreilly.com/product/9780596517748.do</a></li>\n<li><a href=\"https://www.udemy.com/understand-javascript/\">https://www.udemy.com/understand-javascript/</a></li>\n</ul>","frontmatter":{"title":"JS guide for Java developers: Part 1 — scope, closures, global context, this, and undefined","date":"September 17, 2018"}}},"pageContext":{"slug":"/js-guide-for-java-devs-part-1/","previous":null,"next":null}}