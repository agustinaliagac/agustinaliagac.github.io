{"data":{"site":{"siteMetadata":{"title":"Agus Aliaga","author":"Agustín Aliaga"}},"markdownRemark":{"id":"737ac3ec-28aa-5b05-b3a8-fd04b808d396","excerpt":"In this tutorial series I’ll be creating a very simple app called “GiphyTrends”\nthat will demonstrate how to use some third-party libraries…","html":"<p>In this tutorial series I’ll be creating a very simple app called “GiphyTrends”\nthat will demonstrate how to use some third-party libraries. The libraries I\nchose are the ones that I found extremely useful in previous projects, and the\napp itself will be really simple so we can focus in showing the strong points of\nthem. Our app will display the trending GIFs of “Giphy”. I’m using this service\njust because at the moment of writing this tutorial it has an open API that\nwe’ll be using to retrieve data from. For each tutorial we’ll be comparing one\n“Android SDK” solution to a “third-party” one. In other words, we’ll compare\nboth implementations: with and without the library itself. It doesn’t mean that\nthese are the only ways to achieve our goals, but rather two different\napproaches.</p>\n<blockquote>\n<p>All example code is hosted in :</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/agustinaliagac/GiphyTrends-AndroidExamples\">https://github.com/agustinaliagac/GiphyTrends-AndroidExamples</a></p>\n</blockquote>\n<h4>Building a REST Client in Android</h4>\n<p>REST ( Representational state transfer) has become a common way of\napplication-level communication between clients and servers over the network in\nthe last years. It’s fair to say that this is something that you probably have\ndone or will do in your next projects. For this tutorial the only API endpoint\nwe’ll be using is:\n<a href=\"https://github.com/Giphy/GiphyAPI#trending-gifs-endpoint\">https://github.com/Giphy/GiphyAPI#trending-gifs-endpoint</a>\nwith a simple HTTP GET request. The idea is to retrieve and display all trending\nGIFs from this endpoint. So what are some of the options that we have in Android\nto create a RESTful Client?</p>\n<h3>Implementing without extra libraries</h3>\n<p><a href=\"https://developer.android.com/reference/android/os/AsyncTask.html\">AsyncTasks</a>:\nThis option comes with Android’s core since API Level 3, and it’s available for\nus to use without adding any <em>gradle</em> dependency. AsyncTask allows us to perform\nbackground operations (e.g. network calls) in a different thread (preventing the\nmain thread to be blocked) and publish its results on the main thread. This\nmethod is easy to implement, but it comes with some difficulties like the fact\nthat you have to manage cancellation within our Component’s life-cycle. (read\nmore:\n<a href=\"http://blog.danlew.net/2014/06/21/the-hidden-pitfalls-of-asynctask/\">http://blog.danlew.net/2014/06/21/the-hidden-pitfalls-of-asynctask/</a>).\nWe will use AsyncTask to execute the network call through Java’s\n<strong>HttpURLConnection</strong> class.</p>\n<p>We’ll first create all common components for both approaches (UI, permissions,\nentities, etc.). Lets start by adding manifest permissions to our app including\n“<em>INTERNET</em>” and “<em>ACCESS<em>NETWORK</em>STATE</em>” permissions to allow us to retrieve\ndata from the network:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.example.androidlibsexample<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_NETWORK_STATE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.view.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Setup the Main Activity to display the UI</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FetchGiphyTrendsTask<span class=\"token punctuation\">.</span>OnLoadListener</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        FetchGiphyTrendsTask fetchGiphyTrendsTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FetchGiphyTrendsTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fetchGiphyTrendsTask<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLoadComplete</span><span class=\"token punctuation\">(</span>GiphyServiceResponse response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        TextView contentText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TextView<span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>contentText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        contentText<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"There was an error\"</span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Create the AsyncTask</h4>\n<p>Notice that in this approach, we’re directly reading the API response through a\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html?is-external=true\">BufferedReader</a>.\nIf you’re not familiar with AsyncTask, the basic concept is that it will execute\nthe blocking task declared inside the “doInBackground()” method on another\nthread, and will later publish its results in “onPostExecute()” method on the UI\nthread. This is a cool feature, because it prevents blocking the UI while doing\na blocking operation. Another great feature is that it takes care of\nmulti-threading communication.</p>\n<p>When the task is complete, it will write the raw reponse in a simple TextView,\nfor the sake of simplicity. In “Part II”, we will take care of our UI so don’t\npanic!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchGiphyTrendsTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncTask</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Void<span class=\"token punctuation\">,</span> Void<span class=\"token punctuation\">,</span> GiphyServiceResponse<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Context mContext<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> OnLoadListener mListener<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FetchGiphyTrendsTask</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">,</span> OnLoadListener listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mContext <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n        mListener <span class=\"token operator\">=</span> listener<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> GiphyServiceResponse <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span>Void<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        BufferedReader reader <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n            URL myUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            HttpURLConnection conn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpURLConnection<span class=\"token punctuation\">)</span> myUrl\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> statusCode <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            InputStream inputStream <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            StringBuffer buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputStream <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            String line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            String response <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">deserializeServiceResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span>GiphyServiceResponse giphyServiceResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span>giphyServiceResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>giphyServiceResponse <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mListener<span class=\"token punctuation\">.</span><span class=\"token function\">onLoadComplete</span><span class=\"token punctuation\">(</span>giphyServiceResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> GiphyServiceResponse <span class=\"token function\">deserializeServiceResponse</span><span class=\"token punctuation\">(</span>String response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        GiphyServiceResponse giphyServiceResponse <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            JSONObject responseJson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            JSONArray dataJson <span class=\"token operator\">=</span> responseJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            ArrayList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Gif<span class=\"token punctuation\">></span></span> gifs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Gif<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dataJson<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                JSONObject gifJson <span class=\"token operator\">=</span> dataJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                JSONObject imagesJson <span class=\"token operator\">=</span> gifJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                JSONObject fixedHeightImageJson <span class=\"token operator\">=</span> imagesJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fixed_height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                JSONObject fixedWidthImageJson <span class=\"token operator\">=</span> imagesJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fixed_width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                JSONObject downsizedImageJson <span class=\"token operator\">=</span> imagesJson<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"downsized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Image fixedHeight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>fixedHeightImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedWidthImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedHeightImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Image fixedWidth <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>fixedWidthImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedWidthImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedHeightImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Image downsized <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>downsizedImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedWidthImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        fixedHeightImageJson<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Images images <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Images</span><span class=\"token punctuation\">(</span>fixedHeight<span class=\"token punctuation\">,</span> fixedWidth<span class=\"token punctuation\">,</span> downsized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Gif gif <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gif</span><span class=\"token punctuation\">(</span>gifJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        gifJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        gifJson<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                gifs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            giphyServiceResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GiphyServiceResponse</span><span class=\"token punctuation\">(</span>gifs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            mListener<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> giphyServiceResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OnLoadListener</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">onLoadComplete</span><span class=\"token punctuation\">(</span>GiphyServiceResponse response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4><strong>What about serialization?</strong></h4>\n<p>The server response comes serialized in JSON format (Javascript Object\nNotation), but we are only able to see a String representation after reading it\nwith <em>BufferedReader</em>. We need a way to map this JSON response into Java\nobjects, to be able to manipulate the data and do whatever we want with it. This\nprocess is called “<em>deserialization</em>”.</p>\n<p>In this approach, we have to take care of this process, as you can see in\n“<em>deserializeServiceResponse()</em>” method. We’re using “<em>org.json</em>” package\nclasses to get JSONObjects and JSONArrays , and later transforming this data\ninto our entity objects. The process is defined within a <em>try-catch</em> structure\nto avoid crashes from <em>JSONException</em> in runtime.</p>\n<p>Now lets imagine that “<em>Giphy</em>” decides to change this API endpoint, so the JSON\nresponse will be structured differently. Using this approach, it would imply\nthat we have to change our entity’s attributes as well as our deserialization\nmethod. This may not sound as a big deal, but if the API is constantly evolving\n(e.g during parallel backend and mobile development) it can be a really tedious\ntask to do.</p>\n<h3>Using Retrofit and Gson</h3>\n<p><a href=\"https://square.github.io/retrofit/\">Retrofit</a> is an open source library created\nby Square, that defines itself as it follows:</p>\n<blockquote>\n<p>“A type-safe HTTP client for Android and Java”.</p>\n</blockquote>\n<p>It aims simplicity, performing synchronous or asynchronous HTTP requests, which\nmeans you can make either “blocking” or “non-blocking” calls. If you want to use\nblocking calls, remember to implement it in a separate thread to avoid blocking\nthe app’s main thread, otherwise you’ll get a NetworkOnMainThreadException. I\nhaven’t done a performance/profiling test on the library, but I never had any\nkind of problems with that aspect. Let’s see how we can implement the same\n“AsyncTask” behavior but using this library.</p>\n<h4><strong>Adding the dependency in the app’s “build.gradle” file</strong></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> compile ‘com.squareup.retrofit2:retrofit:2.2.0’\n compile ‘com.squareup.retrofit2:converter-gson:2.2.0’</code></pre></div>\n<h4><strong>Defining the API endpoints</strong></h4>\n<p>You’ll need to create a Java interface to declare each endpoint that you’ll be\nusing of the API. Using annotations you can specify which HTTP method to use, as\nwell as the root-relative path. In this case, we’re only setting up one simple\nendpoint.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public interface GiphyAPI {\n\n@GET(“gifs/trending”)\n  Call&lt;GiphyServiceResponse&gt; getTrends(@Query(“api_key”) String apiKey);\n}</code></pre></div>\n<p>The “<em>getTrends</em>()” method will return a Call object, that will later be used to\naccess the endpoint. Notice we’re setting the class type using Generics so the\nlibrary knows what kind of objects will manipulate. Retrofit allows us to pass\nthis method a @Query parameter, or a @Path variable to fully build the URL\nyou’re targeting. Also, if you’re performing a POST/PUT request, you can pass a\n@Body variable to tell the library how to build the request.</p>\n<h4>Building and executing the request</h4>\n<p>Finally, we have to build an execute the request. We’re using an asynchronous\ncall, getting the result in the callback method, and displaying it in a simple\nTextView, just like in the first approach.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Gson gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Retrofit retrofit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Retrofit<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">baseUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.giphy.com/v1/\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addConverterFactory</span><span class=\"token punctuation\">(</span>GsonConverterFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>gson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        GiphyAPI service <span class=\"token operator\">=</span> retrofit<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>GiphyAPI<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Call<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>GiphyServiceResponse<span class=\"token punctuation\">></span></span> call <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getTrends</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dc6zaTOxFJmzC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>GiphyServiceResponse<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span>Call<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>GiphyServiceResponse<span class=\"token punctuation\">></span></span> call<span class=\"token punctuation\">,</span> Response<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>GiphyServiceResponse<span class=\"token punctuation\">></span></span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                TextView contentText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TextView<span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>contentText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                contentText<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>Call<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>GiphyServiceResponse<span class=\"token punctuation\">></span></span> call<span class=\"token punctuation\">,</span> Throwable t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4><strong>Serializers with Retrofit</strong></h4>\n<p>Retrofit uses “Converters” to serialize/deserialize objects. In our case, we’re\nusing “<a href=\"https://github.com/google/gson\">Gson</a>” as a serialization library, but\nyou could also pick another one like\n<a href=\"https://github.com/FasterXML/jackson\">Jackson</a> or\n<a href=\"https://github.com/square/moshi\">Moshi</a>.</p>\n<p>In contrast to the tedious process of using “<em>org.json</em>” classes to deserialize\nthe response, you can directly use your entity classes to tell Retrofit how the\nresponse is structured, and how it should be (de)serialized. The only thing you\nneed to take care of, is specifying the class attributes’s names when they are\ndifferent from the JSON response using the @SerializedName annotation.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>SerializedName<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Created by agustinaliaga on 2/23/17.\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Images</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fixed_height\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Image fixedHeight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fixed_width\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Image fixedWidth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Image downsized<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Images</span><span class=\"token punctuation\">(</span>Image fixedHeight<span class=\"token punctuation\">,</span> Image fixedWidth<span class=\"token punctuation\">,</span> Image downsized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fixedHeight <span class=\"token operator\">=</span> fixedHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fixedWidth <span class=\"token operator\">=</span> fixedWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>downsized <span class=\"token operator\">=</span> downsized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Image <span class=\"token function\">getFixedHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fixedHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFixedHeight</span><span class=\"token punctuation\">(</span>Image fixedHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fixedHeight <span class=\"token operator\">=</span> fixedHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Image <span class=\"token function\">getFixedWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fixedWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFixedWidth</span><span class=\"token punctuation\">(</span>Image fixedWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fixedWidth <span class=\"token operator\">=</span> fixedWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Image <span class=\"token function\">getDownsized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> downsized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDownsized</span><span class=\"token punctuation\">(</span>Image downsized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>downsized <span class=\"token operator\">=</span> downsized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        StringBuilder builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fixedHeight<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fixedWidth<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>downsized<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><strong>Conclusion</strong></h3>\n<p>With Retrofit, programming gets much more “declarative” and less “imperative”\nallowing you to focus on the data and what to do with it. I gained a lot of\nproductivity just by adopting Retrofit as my default REST Client interface. Some\nof the greatest things about it are:</p>\n<ul>\n<li>Retrofit gives you full control of asynchronous/synchronous requests, without\nthe need of cancelling tasks during life-cycle updates of your components.</li>\n<li>You can easily add “interceptors” to perform tasks like adding HTTP headers or\ndata to your request, or analyze responses globally.</li>\n<li>(De)serializing objects is quite faster to implement using a <em>Converter</em> with\n<em>Gson *compared to using “org.json” classes, and performance looks great. If you\nneed a very specific way to serialize an object, *Gson</em> still handles this\nsituation allowing you the register your own\n<a href=\"https://google.github.io/gson/apidocs/com/google/gson/TypeAdapter.html\">TypeAdapter</a>\n.</li>\n<li>The code looks way cleaner, just because you can define all endpoints (if you\nwant to) in a single Java Interface, but still manage each one of them\nseparately with the help of annotations and the tools Retrofit gives you.</li>\n</ul>\n<p>Hopefully, this tutorial helped you to know how Retrofit works, and how simple\nit is to build a full REST Client with it. In “Part II”, we’ll build our UI for\nthis app exploring “Android-core” options as well as libraries like “Butter\nknife”, and “Data-binding library”.</p>\n<p>Remember you can clone/fork the project here:\n<a href=\"https://github.com/agustinaliagac/GiphyTrends-AndroidExamples\">https://github.com/agustinaliagac/GiphyTrends-AndroidExamples</a></p>","frontmatter":{"title":"Common Android scenarios with and without third-party dependencies, part 1: REST Client","date":"February 27, 2017"}}},"pageContext":{"slug":"/blog/common-android-scenarios-with-and-without-dependencies-part-1-rest/","previous":{"fields":{"slug":"/blog/things-to-keep-in-mind-before-adding-dependencies/","type":"blog"},"frontmatter":{"title":"Things to keep in mind before adding another software dependency to your project"}},"next":{"fields":{"slug":"/blog/lessons-learned-on-mobile-ble-development/","type":"blog"},"frontmatter":{"title":"Lessons learned from building a mobile app with Bluetooth Low Energy support"}}}}