{"data":{"site":{"siteMetadata":{"title":"Blogging!","author":"Agustín Aliaga"}},"markdownRemark":{"id":"e756ac76-88a9-5413-8232-4083d5fc6512","excerpt":"In the last tutorial we’ve started our “dummy” project GiphyTrends, that called\nGiphy’s public REST API to get the data using two approaches…","html":"<p>In the last tutorial we’ve started our “dummy” project GiphyTrends, that called\nGiphy’s public REST API to get the data using two approaches:</p>\n<ol>\n<li>Android SDK approach : We used <em>AsyncTask</em> to perform the blocking operation in\na background thread, <em>HttpURLConnection</em> to perform the network task, and\n*“org.json” *to deserialize manually the response.</li>\n<li>Third-party library approach: We set up Retrofit to perform the tasks, and Gson\nto be the serializer.</li>\n</ol>\n<p>The problem is we still have this horrible UI, showing raw API response data:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*twWQFmiOGXJ5UHhGjAjgOg.jpeg\"></p>\n<p>In this tutorial we will take care of the View layer to be able to show real\ncontent to the user. But first, since we’ll be adding more code to the project,\nwe should re-arrange its architecture. At this point, all logic is performed\nfrom a single place (MainActivity), which is not a very good idea if we want to\nscale. So lets change this to a cleaner MVP architecture. We’ll first create a\nContract for both screens (the List and the Detail), that will define the\nexpected behavior of its correspondent presenter and view. A “BaseContract” is\nused to define common methods, such as view-component lifecycle updates. This is\nhow our “GifListContract” interface looks:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>androidlibsexample<span class=\"token punctuation\">.</span>presenter<span class=\"token punctuation\">.</span>contract<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>androidlibsexample<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span>Gif<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>androidlibsexample<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span>GiphyServiceResponse<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GifListContract</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">setLoadingIndicator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">showGifList</span><span class=\"token punctuation\">(</span>GiphyServiceResponse response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">showGifDetails</span><span class=\"token punctuation\">(</span>String id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Presenter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseContract<span class=\"token punctuation\">.</span>Presenter</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">loadGifs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">showGifDetails</span><span class=\"token punctuation\">(</span>Gif gif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After creating our Contracts, Presenters and Fragments we will setup a\nrepository class. Using the repository pattern you would expect to create at\nleast two different data-sources, such as a local Database and a remote API, but\nsince we’re not using local data (yet) we’re only creating the repository as an\nabstraction layer to get the data from API. Our repository will be a Singleton\nbecause we don’t really need more than one instance of this class.</p>\n<p>Now we’re ready to implement our views. A couple of things to consider:</p>\n<ul>\n<li>We will build the same features using the same two approaches we already used in\nthe first tutorial (Android SDK vs “third-party libraries”)</li>\n<li>All approaches will use a third-party library called “Glide” to fetch and\ndisplay images. From my perspective, I don’t see why I would want to implement\nan Image manipulation library myself.</li>\n</ul>\n<h3>Implementing without extra libraries</h3>\n<p>In Android development you probably know that we constantly use “findViewById()”\nto find our XML-defined views and control them from the correspondent Java\ncomponent. This “standard” way of relating the view to its logic gives you full\ncontrol of your layouts. Let’s see how we implement some basic code in our\nFragments and out list adapter:</p>\n<p>Our app now looks like this:</p>\n<p>Not bad, but you can tell we’re using “findViewById()” way too much, or maybe\nthe fact that the code is quite long for such a simple task. Also, if you’re not\nfamiliar with ListViews in Android, you’ll probably look at our “getView()”\nmethod in the list adapter and think “what the hell is a convertView or a\nviewHolder?”. It actually is an interesting solution to keep the app\nmemory-efficient when loading a long list with a lot of data to render. Instead\nof inflating the views for each row, it will only inflate a couple and then\nreuse them as the user scrolls down. The problem is that it is not so easy to\nremember how to code this pattern. Let’s see how third-party libraries helps us\nsolve these issues.</p>\n<h3>Using ButterKnife, Data-Binding Library and RecyclerView</h3>\n<p>All the nice control you have with the standard approach of binding views comes\nwith a price. Java code is not famous for being super readable, but rather quite\ncomplex and verbose. Also, when you want to communicate user-input events to the\ncorrespondent component you may have to use “Listeners” as callbacks and if\nyou’re building complex views or complex behavior the final code will be really\nlong and hard to maintain . After working some time with Android I realized that\nall this glue code is too much repetitive, always the same. It gets to a point\nthat it’s not only boring to write boilerplate code, but also unproductive.</p>\n<h4>Data-Binding Library</h4>\n<p>Here’s where declarative programming comes handy. There are a couple of\ninteresting libraries that solve these problems (and much more) with different\nperspectives and patterns. One example of this is the “Data Binding Library”\ncreated by Google, which you can easily use importing the Support Library into\nyour project. With this library you’ll be able to bind XML views to data models\nin a declarative way, writing small expressions into the layout that define how\nyour views will display the information. No more “findViewById()” or boilerplate\ncode with declarative layouts. So, why isn’t everybody using the Data Binding\nLibrary ? Well … One common opinion is that it comes with a performance cost of\nyour application if you don’t use it right or if your layouts are way too\ncomplicated, but I need to do further investigation on this one. Another common\nopinion is that the architectural decision of inserting “logic code” into the\nlayouts themself is not a good idea. Creating tests with this kind of\narchitecture is probably harder with all these expressions inside the view\nitself, and layouts would become less reusable since they are bound to a\nspecific data model. Adding the library to our project as well as using it is\nextremely simple. You just have to define the model to which your layout will\nlink, and then write small expressions in your XML to bind data. Then from the\nFragment/Activity set the object to be bound and you’re done. Here’s how our\nlayout looks like (notice the expression to check if the object’s attributes are\nnot empty):</p>\n<p>And the resulting layout (evaluating all expressions inside the view):</p>\n<h4>Butterknife</h4>\n<p>This is a really cool library that defines itself as <em>“Field and method binding\nfor Android views”</em>. This is exactly what it does. It binds component views and\nmethods to your layout. Similarly to Data-Binding it saves us from repeating\n“findViewById()” code with the power of Annotations like @BindView, but in a\ndifferent way. It doesn’t really link the view to a data model, and you don’t\nneed to change anything in your XMLs. After setting this up, it will generate\nall the necessary code “automagically”. It has a couple more features such as\noptional bindings and multi-method listeners. Using both libraries our code\nlooks much more declarative, readable and clean.</p>\n<p>Remember we talked about the ViewHolder pattern used in Android ListViews? I\nadded another component from the support library called “RecyclerView”. It will\nbasically use the same pattern but in a cleaner way, so that we can implement it\nwithout having to remember the “convertView” way of doing it. Also, we’ve set up\nButterKnife in the list adapter itself.</p>\n<h4>Conclusion</h4>\n<p>We’ve created a very simple example of how to create Android layouts with and\nwithout third-party dependencies. You will know if Butterknife and/or\nData-Binding are worth adding to your project. In the next tutorial (part III)\nwe’ll save a “favorite GIF” locally. We’ll follow the same approach as here, and\ncheck out how we can do this natively (with SQLite and Content Providers) as\nwell as using third-party projects (maybe an ORM, maybe Realm).</p>\n<p>Remember you can clone/fork the project here:\n<a href=\"https://github.com/agustinaliagac/GiphyTrends-AndroidExamples\">https://github.com/agustinaliagac/GiphyTrends-AndroidExamples</a></p>\n<p>And follow me on Github if you want:\n<a href=\"https://github.com/agustinaliagac\">https://github.com/agustinaliagac</a></p>\n<ul>\n<li><a href=\"https://medium.com/tag/android?source=post\">Android</a></li>\n<li><a href=\"https://medium.com/tag/android-app-development?source=post\">Android App\nDevelopment</a></li>\n<li><a href=\"https://medium.com/tag/android-layout?source=post\">Android Layouts</a></li>\n<li><a href=\"https://medium.com/tag/butterknife?source=post\">Butterknife</a></li>\n<li><a href=\"https://medium.com/tag/android-data-binding?source=post\">Android Data Binding</a></li>\n</ul>\n<h3><a href=\"https://medium.com/@agustin.aliaga\">Agustin Aliaga</a></h3>\n<p>Software Developer</p>","frontmatter":{"title":"Common Android scenarios with and without third-party dependencies, part 1: Layouts","date":"February 27, 2017"}}},"pageContext":{"slug":"/common-android-scenarios-with-and-without-dependencies-part-2-layouts/","previous":null,"next":{"fields":{"slug":"/common-android-scenarios-with-and-without-dependencies-part-1-rest/"},"frontmatter":{"title":"Common Android scenarios with and without third-party dependencies, part 1: REST Client"}}}}