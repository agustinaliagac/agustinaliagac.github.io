{"data":{"site":{"siteMetadata":{"title":"Agus Aliaga","author":"Agustín Aliaga"}},"markdownRemark":{"id":"6ff8cf22-7a54-5902-b54b-85ce7fb7310a","excerpt":"\n Photo by  Caspar\nRubin \non\n Unsplash This is the second article from the “JS vs Java” series, where we discuss some remarkable differences…","html":"<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7aJPlxn8gwhI7JjcBFr-tQ.jpeg\">\n<span class=\"figcaption_hack\">Photo by <a href=\"https://unsplash.com/photos/fPkvU7RDmCo?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Caspar\nRubin</a>\non\n<a href=\"https://unsplash.com/search/photos/javascript?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></span></p>\n<p>This is the second article from the “JS vs Java” series, where we discuss some remarkable differences in each programming language.\nIn the first article we covered:</p>\n<ul>\n<li>scope</li>\n<li>closures</li>\n<li>global context (execution context)</li>\n<li>this</li>\n<li>undefined</li>\n<li>comparison operators</li>\n</ul>\n<p>Today we’ll be diving into how objects are created in Javascript, and how it embraces OOP in a different way than Java. We’ll cover concepts like encapsulation, inheritance, and object creation.</p>\n<h4>What is OOP?</h4>\n<p>Object Oriented Programming is a programming paradigm (a way of solving problems, thinking solutions and building software) that implements “objects”.\nObjects, which are representations of real life entities (concrete or abstract), usually have data properties (sometimes named “attributes”) and functions/procedures called “methods”. In practice, multiple languages support OOP on different degrees. Notice that Java and JS are considered to be “multi-paradigm” because they also adopt concepts from funcional, and imperative programming. Let’s explore how they implement OOP.</p>\n<h4>Class-based vs Prototype-based</h4>\n<p>Class-based languages <em>like Java</em> define the object’s structure from a class, which is essentially a blueprint. Objects are just instances of this class, meaning that they all have the same attributes and methods.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String breed<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBreed</span><span class=\"token punctuation\">(</span>String breed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WOOF WOOF!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Dog molly <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        molly<span class=\"token punctuation\">.</span><span class=\"token function\">setBreed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puddle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<p>Prototype-based languages <em>like Javascript</em> define the object’s structure dynamically. Objects are not instances from a class, but they rather inherit their properties from another object called its <strong>“prototype”</strong>. The prototype itself is another object that usually has its own prototype, and so on. This multi-object linking creates what we call the <strong>“prototype chain”</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> molly <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmolly<span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> <span class=\"token string\">\"poodle\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>molly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* prints out:\nDog {name: \"\", breed: \"poodle\"}\nbreed: \"poodle\"\nname: \"\"\n__proto__:\nconstructor: ƒ Dog()\n__proto__: Object\n*/</span></code></pre></div>\n<h4>Object creation</h4>\n<h4>Inheritance - The Prototype Chain</h4>\n<h4>Encapsulation</h4>\n<h4>Extra: Modules and namespaces</h4>\n<h4>Awesome Resources</h4>\n<ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">https://github.com/getify/You-Dont-Know-JS</a></li>\n<li><a href=\"https://github.com/denysdovhan/wtfjs\">https://github.com/denysdovhan/wtfjs</a></li>\n<li><a href=\"http://shop.oreilly.com/product/9780596517748.do\">http://shop.oreilly.com/product/9780596517748.do</a></li>\n<li><a href=\"https://www.udemy.com/understand-javascript/\">https://www.udemy.com/understand-javascript/</a></li>\n</ul>","frontmatter":{"title":"JS vs Java: Part 2 — Object Oriented Programming","date":"October 15, 2018"}}},"pageContext":{"slug":"/blog/js-vs-java-part-2/","previous":{"fields":{"slug":"/blog/git-basics-pull-requests/"},"frontmatter":{"title":"Git Basics: Pull Requests"}},"next":{"fields":{"slug":"/about-me/"},"frontmatter":{"title":""}}}}